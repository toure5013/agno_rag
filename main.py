import asyncio
from agno.agent import Agent, RunOutput, RunOutputEvent, RunEvent
from agno.models.ollama import Ollama
from agno.knowledge.knowledge import Knowledge
from agno.vectordb.pgvector import PgVector
from agno.knowledge.embedder.ollama import OllamaEmbedder
from agno.utils.pprint import pprint_run_response
from agno.db.postgres.postgres import PostgresDb

from agno.os import AgentOS
from agno.tools.mcp import MCPTools



prompt_system = """Vous √™tes un Data Scientist expert en analyse de sentiments et en traitement du langage naturel (NLP).
Votre mission est d‚Äôanalyser les emails des clients B2B d‚ÄôOrange C√¥te d‚ÄôIvoire afin d‚Äôidentifier :

les raisons principales de leur insatisfaction,

les th√®mes r√©currents √©voqu√©s par les clients,

et les axes d‚Äôam√©lioration pour optimiser leur exp√©rience.

Vous devez :

D√©tecter le ton et le sentiment g√©n√©ral du message (positif, n√©gatif, neutre, mixte).

Extraire les causes d‚Äôinsatisfaction (ex : lenteur du service, probl√®me de facturation, support non r√©actif, qualit√© r√©seau, etc.).

Proposer des recommandations concr√®tes pour am√©liorer l‚Äôexp√©rience client.

Structurer la r√©ponse de fa√ßon claire, hi√©rarchis√©e et exploitable par les √©quipes m√©tiers d‚ÄôOrange CI.

R√©pondez dans un format structur√© :

üß† Analyse du sentiment :
üîç Th√®mes identifi√©s :
‚ö†Ô∏è Causes d‚Äôinsatisfaction :
üí° Recommandations :


NB : 
- retient de toujours bien affich√©s la reponse pourqu'il facile √† lire , 
- m√™me si la reponse te viens en JSON, toi affiche dans un bon format facilement interpretable
- Sache que tes analyses sont sur l'ann√©e 2025 et ulterieur
"""

from utils.pg_database_utils import (
    POSTGRES_VECTOR_TABLE_NAME,
    build_connection_string,
    POSTGRES_KNOWLEDGE_TABLE_NAME,
)
from utils.ollama_utils import OLLAMA_EMBEDDING_CONFIG, OLLAMA_CONFIG


local_llama = Ollama(id=OLLAMA_CONFIG["model"])

# Mcp integration

# Create MCPTools instance
mcp_tools = MCPTools(
    transport="streamable-http", 
    url="http://127.0.0.1:8001/mcp"
)



# Build database connection
db_url = build_connection_string()
db = PostgresDb(
    db_schema="public",
    db_url=db_url,
    knowledge_table=POSTGRES_KNOWLEDGE_TABLE_NAME,
)

knowledge = Knowledge(
    name="Deepseek research papers",
    description="A database of research papers related to DeepSeek project",
    contents_db=db,
    vector_db=PgVector(
        schema="public",
        table_name=POSTGRES_VECTOR_TABLE_NAME,
        db_url=db_url,
        embedder=OllamaEmbedder(id=OLLAMA_EMBEDDING_CONFIG["model"], dimensions=768),
    ),
)



agent = Agent(
    name="DeepSeek Research Paper Agent",
    description=prompt_system,
    model=local_llama,
    db=db,
    knowledge=knowledge,
    markdown=True,
    add_history_to_context=True,
    tools=[mcp_tools],
)




agent_os = AgentOS(agents=[agent])
# Get the FastAPI app for the AgentOS
app = agent_os.get_app()